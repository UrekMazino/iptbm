const mainProcess = (resultArray, max) => {
    const batch = []
    const analyze = [];
    const perDigit = []

    const Batch = (arr) => {
        const batch = []
        arr.forEach(val => {
            batch.push(val)
        })
        const total = arr.reduce((a, b) => a + b)
        return {batch, total}
    }
    const BatchCollector = (array) => {

        if (array.length === 0) {
            return
        }
        let sub = array.splice(0, 6)
        batch.push(Batch(sub))
        array.slice(0, sub.length)
        BatchCollector(array)
    }

    const Digit = (max) => {
        if (max === 0) {
            return
        }
        perDigit.push({
            n: max--,
            position: [],
            gap: 0,
            currentGap: 0
        })
        Digit(max--)
    }

    const process = (dig, batchArray) => {
        let prevIndex = 0
        batchArray.forEach((val, index) => {
            let matchIndex
            if (val.batch.includes(dig.n)) {
                matchIndex = index
                dig.position.push(matchIndex - 1 - prevIndex + 1)
                dig.gap = 0
                prevIndex = matchIndex
            } else {
                dig.gap++
            }
        })
    }

    BatchCollector(resultArray)
    Digit(max)

    const BatchAnalyze = (batchAr) => {
        const Analyze = (prev, pres) => {
            let cur = prev.reduce((a, b) => a + b)
            let nex = pres.reduce((a, b) => a + b)
            let state, def
            if (cur > nex) {
                state = "decrease"
            }
            if (cur < nex) {
                state = "increase"
            }
            if (cur === nex) {
                state = "steady"
            }
            def = nex - cur
            return {state, def, prev, pres}
        }
        let current = batchAr[0].batch

        batchAr.forEach(val => {
            let next = val.batch
            analyze.push(Analyze(current, next))
            current = next
        })
    }

    perDigit.forEach(val => {
        process(val, batch)
    })
    BatchAnalyze(batch)
    return {perDigit, batch, analyze};
}


const resultString = "\n" +
    "\n" +
    "06,27,37,31,52,46,\n" +
    "02,50,52,47,53,34,\n" +
    "36,18,21,13,32,53,\n" +
    "14,09,51,28,29,35,\n" +
    "49,10,41,22,47,42,\n" +
    "08,45,47,05,21,40,\n" +
    "34,40,55,48,13,43,\n" +
    "03,53,17,35,55,24,\n" +
    "54,35,22,09,02,08,\n" +
    "41,36,21,47,04,11,\n" +
    "03,10,05,14,43,23,\n" +
    "50,43,33,23,27,14,\n" +
    "37,02,45,49,46,13,\n" +
    "19,27,21,25,16,33,\n" +
    "29,42,12,41,01,35,\n" +
    "44,11,55,54,35,28,\n" +
    "24,41,10,18,31,22,\n" +
    "44,10,51,36,55,48,\n" +
    "28,20,41,11,05,27,\n" +
    "27,02,23,49,15,52,\n" +
    "52,31,55,43,18,34,\n" +
    "41,31,16,29,52,14,\n" +
    "37,07,26,46,24,52,\n" +
    "15,24,08,05,10,43,\n" +
    "03,33,04,40,34,35,\n" +
    "26,13,04,54,47,14,\n" +
    "34,48,46,03,50,10,\n" +
    "01,39,02,24,16,33,\n" +
    "50,40,54,53,44,29,\n" +
    "18,43,06,41,44,48,\n" +
    "50,44,03,37,41,14,\n" +
    "45,29,40,14,32,05,\n" +
    "39,29,09,21,19,20,\n" +
    "13,17,25,06,23,19,\n" +
    "49,11,51,13,45,18,\n" +
    "41,17,49,39,06,32,\n" +
    "04,36,28,29,17,49,\n" +
    "12,29,15,06,54,05,\n" +
    "28,55,52,22,41,35,\n" +
    "48,30,19,38,34,02,\n" +
    "24,32,07,11,09,49,\n" +
    "33,34,41,36,05,39,\n" +
    "29,17,38,07,06,41,\n" +
    "52,17,55,45,21,49,\n" +
    "55,33,36,46,02,32,\n" +
    "46,54,13,01,38,30,\n" +
    "22,09,02,08,06,15,\n" +
    "54,47,07,46,06,39,\n" +
    "48,43,12,09,31,36,\n" +
    "44,48,50,37,07,19,\n" +
    "09,16,46,05,43,54,\n" +
    "43,15,55,35,49,52,\n" +
    "01,55,11,20,25,28,\n" +
    "43,15,39,42,13,49,\n" +
    "48,53,34,24,44,16,\n" +
    "46,29,30,34,04,20,\n" +
    "49,53,32,06,44,10,\n" +
    "09,17,45,39,35,15,\n" +
    "06,29,32,47,09,20,\n" +
    "16,24,33,15,30,37,\n" +
    "10,15,36,08,23,05,\n" +
    "24,36,35,07,23,10,\n" +
    "27,51,16,28,04,18,\n" +
    "29,51,23,34,55,08,\n" +
    "52,17,19,10,54,22,\n" +
    "17,35,49,33,16,31,\n" +
    "02,25,37,01,53,48,\n" +
    "43,26,53,44,06,23,\n" +
    "50,44,17,52,01,41,\n" +
    "55,32,24,37,40,04,\n" +
    "30,45,55,21,06,51,\n" +
    "24,18,52,42,19,37,\n" +
    "15,46,42,43,27,34,\n" +
    "20,39,48,15,24,25,\n" +
    "43,10,30,21,50,05,\n" +
    "47,54,38,23,35,52,\n" +
    "50,37,36,06,09,20,\n" +
    "50,09,29,36,37,52,\n" +
    "23,42,34,25,48,41,\n" +
    "25,27,19,45,14,20,\n" +
    "32,08,11,33,42,41,\n" +
    "31,11,45,07,54,08,\n" +
    "34,41,27,17,19,53,\n" +
    "11,29,34,50,10,17,\n" +
    "48,22,23,51,09,26,\n" +
    "19,14,13,40,10,16,\n" +
    "02,48,12,42,44,06,\n" +
    "46,23,42,13,53,52,\n" +
    "02,03,41,15,33,46,\n" +
    "55,21,51,38,22,37,\n" +
    "42,21,44,10,51,25,\n" +
    "50,31,53,46,16,44,\n" +
    "37,48,28,24,01,32,\n" +
    "31,55,01,21,52,48,\n" +
    "33,32,08,06,14,05,\n" +
    "01,09,50,14,37,17,\n" +
    "09,13,41,36,49,45,\n" +
    "48,55,21,05,18,52,\n" +
    "51,02,49,47,46,36,\n" +
    "54,10,17,53,39,06,\n" +
    "22,51,41,31,16,39,\n" +
    "49,01,40,21,20,55,\n" +
    "07,09,51,02,24,39,\n" +
    "13,31,41,35,09,25,\n" +
    "42,06,09,29,33,01,\n" +
    "49,06,26,55,03,14,\n" +
    "02,18,49,07,19,47,\n" +
    "24,30,41,40,52,12,\n" +
    "34,13,06,03,52,26,\n" +
    "28,16,33,13,09,36,\n" +
    "32,48,06,29,08,24,\n" +
    "20,46,14,55,33,10,\n" +
    "41,36,02,33,23,05,\n" +
    "32,45,10,39,20,35,\n" +
    "07,40,27,15,54,22,\n" +
    "19,37,29,33,50,06,\n" +
    "15,12,33,42,51,54,\n" +
    "28,43,49,35,07,51,\n" +
    "21,19,29,16,05,14,\n" +
    "12,30,47,29,42,34,\n" +
    "40,17,19,41,14,20,\n" +
    "36,25,06,23,18,19,\n" +
    "14,22,53,29,12,26,\n" +
    "08,37,42,17,33,23,\n" +
    "24,49,07,47,25,45,\n" +
    "01,40,33,24,30,45,\n" +
    "34,36,03,35,17,04,\n" +
    "41,27,32,34,05,01,\n" +
    "29,19,16,18,09,52,\n" +
    "15,12,16,17,03,09,\n" +
    "17,51,33,25,21,46,\n" +
    "54,11,48,10,09,38,\n" +
    "36,06,07,33,38,39,\n" +
    "48,42,18,06,46,28,\n" +
    "23,45,36,28,17,18,\n" +
    "17,24,36,15,34,18,\n" +
    "20,06,29,18,52,44,\n" +
    "20,06,29,18,52,44,\n" +
    "30,46,20,17,34,15,\n" +
    "48,31,42,40,11,50,\n" +
    "52,30,36,42,45,34,\n" +
    "07,52,03,34,46,50,\n" +
    "54,11,26,46,33,51,\n" +
    "09,45,36,27,18,54,\n" +
    "26,14,51,10,12,08,\n" +
    "09,32,37,34,31,33,\n" +
    "22,06,43,42,17,44,\n" +
    "03,36,15,41,51,28,\n" +
    "24,25,31,54,19,14,\n" +
    "37,42,45,20,54,41,\n" +
    "40,46,37,48,29,20,\n" +
    "47,16,11,05,22,40,\n" +
    "44,50,07,52,46,36,\n" +
    "27,32,53,37,39,36,\n" +
    "35,45,29,06,33,02,\n" +
    "52,05,42,18,15,11,\n" +
    "30,35,51,05,26,54,\n" +
    "22,16,13,27,38,43,\n" +
    "40,03,34,37,19,15,\n" +
    "49,10,16,22,51,55,\n" +
    "22,25,01,02,28,41,\n" +
    "23,15,18,24,26,32,\n" +
    "40,07,51,12,09,02,\n" +
    "41,19,02,47,45,54,\n" +
    "27,54,03,46,45,25,\n" +
    "28,25,31,48,45,17,\n" +
    "15,35,51,26,40,48,\n" +
    "30,20,11,45,21,18,\n" +
    "21,32,09,13,40,34,\n" +
    "45,08,04,28,17,13,\n" +
    "15,55,43,53,40,47,\n" +
    "02,19,48,24,43,52,\n" +
    "54,22,10,28,14,26,\n" +
    "24,35,53,47,05,44,\n" +
    "12,04,43,49,42,47,\n" +
    "11,46,09,12,43,16,\n" +
    "33,38,29,08,13,50,\n" +
    "24,48,08,38,45,11,\n" +
    "07,14,13,54,30,19,\n" +
    "41,47,09,51,21,43,\n" +
    "05,21,20,10,29,50,\n" +
    "30,25,20,41,17,42,\n" +
    "05,35,13,39,27,09,\n" +
    "30,33,54,43,41,32,\n" +
    "08,49,02,44,07,19,\n" +
    "44,13,19,33,27,39,\n" +
    "35,07,11,30,23,55,\n" +
    "39,43,18,07,29,52,\n" +
    "47,34,06,15,51,01,\n" +
    "16,44,36,47,37,13,\n" +
    "04,52,21,48,15,30,\n" +
    "03,44,10,13,23,11,\n" +
    "27,49,07,04,26,33,\n" +
    "40,30,44,33,51,27,\n" +
    "10,34,28,46,04,14,\n" +
    "03,15,27,35,16,51,\n" +
    "40,08,45,06,23,41,\n" +
    "08,17,12,01,35,03,\n" +
    "24,04,40,46,38,21,\n" +
    "32,19,43,27,29,45,\n" +
    "04,25,21,53,23,27,\n" +
    "17,15,40,42,38,51,\n" +
    "07,25,15,22,44,54,\n" +
    "55,44,03,14,41,16,\n" +
    "15,20,08,28,19,05,\n" +
    "34,33,50,17,27,13,\n" +
    "44,32,31,41,29,46,\n" +
    "09,08,05,01,30,52,\n" +
    "08,26,17,41,37,49,\n" +
    "53,48,40,23,24,02,\n" +
    "14,29,09,06,38,15,\n" +
    "48,36,42,55,11,22,\n" +
    "45,29,12,03,26,51,\n" +
    "16,21,25,29,15,06,\n" +
    "01,24,39,06,53,40,\n" +
    "26,03,43,10,54,14,\n" +
    "07,50,38,34,51,22,\n" +
    "25,50,49,38,21,19,\n" +
    "49,53,03,31,22,08,\n" +
    "36,38,47,43,28,15,\n" +
    "26,23,34,41,45,29,\n" +
    "05,33,49,47,28,42,\n" +
    "21,37,33,34,55,25,\n" +
    "05,15,43,06,22,18,\n" +
    "23,28,25,24,36,30,\n" +
    "07,10,09,55,28,18,\n" +
    "51,19,41,14,35,20,\n" +
    "29,13,53,27,54,23,\n" +
    "20,02,52,13,44,45,\n" +
    "53,02,05,41,09,51,\n" +
    "44,26,51,11,21,45,\n" +
    "05,48,14,09,33,02,\n" +
    "53,17,37,13,23,04,\n" +
    "03,11,02,51,31,43,\n" +
    "19,46,03,34,04,28,\n" +
    "04,16,26,24,14,47,\n" +
    "43,14,01,15,33,45,\n" +
    "42,17,06,08,12,04,\n" +
    "09,43,46,51,36,16,\n" +
    "15,18,02,29,16,24,\n" +
    "46,18,15,08,27,37,\n" +
    "01,33,43,53,26,20,\n" +
    "28,32,12,09,18,50,\n" +
    "48,10,18,42,30,54,\n" +
    "45,08,40,02,15,19,\n" +
    "48,24,47,39,33,15,\n" +
    "02,39,53,49,27,55,\n" +
    "04,13,51,37,34,01,\n" +
    "11,17,28,06,09,01,\n" +
    "17,20,29,02,22,39,\n" +
    "19,27,28,05,33,10,\n" +
    "54,22,23,49,42,41,\n" +
    "30,14,05,27,34,42,\n" +
    "18,15,43,25,34,19,\n" +
    "20,13,19,43,24,15,\n" +
    "11,04,43,36,51,18,\n" +
    "10,18,33,39,23,11,\n" +
    "28,10,01,35,30,48,\n" +
    "47,45,41,06,37,48,\n" +
    "21,26,15,48,35,30,\n" +
    "20,22,52,54,33,30,\n" +
    "05,01,27,26,44,11,\n" +
    "48,24,02,12,42,43,\n" +
    "28,40,38,35,19,52,\n" +
    "19,32,25,12,17,36,\n" +
    "34,46,48,23,21,30,\n" +
    "55,35,42,23,11,01,\n" +
    "48,28,17,55,47,22,\n" +
    "15,38,23,28,03,49,\n" +
    "49,55,20,52,36,47,\n" +
    "54,02,03,21,13,06,\n" +
    "03,24,19,01,17,11,\n" +
    "11,36,23,34,15,27,\n" +
    "46,38,43,04,08,17,\n" +
    "43,15,02,33,16,25,\n" +
    "51,01,43,13,18,53,\n" +
    "16,01,06,34,02,38,\n" +
    "54,55,26,45,43,24,\n" +
    "04,03,33,07,20,22,\n" +
    "07,11,06,15,49,12,\n" +
    "41,39,14,09,31,04,\n" +
    "23,25,01,26,14,28,\n" +
    "18,12,29,07,28,50,\n" +
    "42,28,30,34,33,01,\n" +
    "41,17,07,51,39,46,\n" +
    "12,04,48,06,43,55,\n" +
    "10,02,17,04,35,51,\n" +
    "55,50,06,45,12,40,\n" +
    "50,48,02,55,46,09,\n" +
    "42,32,54,44,11,39,\n" +
    "31,54,29,52,24,12,\n" +
    "45,23,11,13,46,04,\n" +
    "09,27,44,49,11,24,\n" +
    "09,02,26,49,22,30,\n" +
    "03,31,28,37,55,25,\n" +
    "39,52,45,22,11,17,\n" +
    "30,17,06,12,04,29,\n" +
    "18,35,36,34,20,21,\n" +
    "11,40,03,53,44,38,\n" +
    "47,02,04,44,54,25,\n" +
    "50,39,30,40,33,18,\n" +
    "46,29,17,54,30,50,\n" +
    "03,30,05,06,02,14,\n" +
    "14,07,37,20,47,43,\n" +
    "55,37,09,26,10,43,\n" +
    "11,48,25,02,30,38,\n" +
    "12,34,03,29,15,40,\n" +
    "04,42,44,49,39,21,\n" +
    "54,49,42,39,19,35,\n" +
    "51,50,27,49,11,24,\n" +
    "44,17,07,49,35,14"

const fin = resultString.replace(/(?:\r\n|\r|\n)/g, '').replace(' ', '')

const Result = mainProcess(fin.split(',').map(Number).reverse(), 100)


Result.perDigit.reverse().forEach(val => {

    console.log('Number = ' + val.n)
    console.log('Position = ' + val.position)
    console.log('Gap = ' + val.gap)
    console.log('\n')
})

Result.batch.forEach(val => {
    console.log(val.batch + ' :: Total= ' + val.total)

})

Result.analyze.forEach(val => {
    console.log(val)
})


function product_Range(a, b) {
    var prd = a, i = a;

    while (i++ < b) {
        prd *= i;
    }
    return prd;
}


/*
function combinations(n, r)
{
    if (n===r || r===0)
    {
        return 1;
    }
    else
    {
        r=(r < n-r) ? n-r : r;
        return product_Range(r+1, n)/product_Range(1,n-r);
    }
}


 */


/*
function* combinations(n, k) {
    if (k < 1) {
        yield [];
    } else {
        for (let i = k; i <= n; i++) {
            for (let tail of combinations(i - 1, k - 1)) {
                tail.push(i);
                yield tail;
            }
        }
    }
}



// Example:

let me=[]
for(let x=0;x<5;x++){
    Result.batch[x].batch.forEach(val=>{
        me.push(val)
    })
}
for (let combination of combinations(55, 6)) {
    if(combination.reduce((a,b)=>a+b)===115){
        for(let x=0;x<me.length;x++){
            if(combination.includes(me[x])){
                break
            }else {
                console.log(combination)
                break
            }
        }
    }

}
 */


//sk.eyJ1Ijoid2FyengyNSIsImEiOiJjbGxscG5kOWUxZ2ZlM2NsaW1xbWh1OTlvIn0.OSan15IY2tEYiPjZKsUlxQ
